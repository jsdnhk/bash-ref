#!/bin/bash

#print用於產生簡單輸出
#多個表達式的字符串值之間用輸出字段分隔符分開

gawk '{ print $1, $2 }'

#輸出字段分割符與輸出記錄分隔符存儲在內建變量OFS與ORS中，
#初始情況下，OFS與ORS被設置成一個空格符與一個換行符，但它們的值可以在任何時候改變
#下面這個程序打印每一行的第1第2個字段，字段之間用分號分開，在每一行的第2個字段之後輸出兩個換行符

gawk 'BEGIN { OFS = ":"; ORS = "\n\n" }
      { print $1, $2 }'

#下面這個程序拼接第1個與第2個字段，兩個字段之間沒有輸出字段分隔符插入

gawk '{ print $1 $2 }'

#這兩句話等價

gawk '{ print }'
gawk '{ print $0 }'

#輸出空行

gawk '{ print "" }'


#printf用於產生格式化輸出

#printf不會自動換行，需要手動添加\n
#格式說明符以%開始，以轉換字符結束
# - 表達式在它的域內左對齊，沒有則右對齊
# width 爲了達到規定的寬度，必要時填充空格
# .prec 字符串最大寬度, 或十進制數的小數部分的位數

gawk '{ printf ("Name:%-10sAge:%-5dWeight:%7.2f\n", $1, $2, $3) }'


#輸出到文件
#重定向運算符>與>>用於將輸出重定向到文件，文件名必須用雙引號括起來

#下面這個程序將所有輸入行的第1個與第3個字段輸出到兩個文件中：如果第3個字段大於100，則輸出到bigpop，否則輸出到smallpop
gawk '{ print($1, $3) > ($3 > 100 ? "bigpop" : "smallpop") }'


#輸出到管道
#print的輸出將以管道的方式傳遞給command

# Canada 3852
# China 3705
# USA 3615
# Brazil 3286

gawk '{ pop[$1]+=$2 }
END{ for(c in pop) printf("%15-s%6d\n", c, pop[c]) | "sort -nk 2"; close("sort -nk 2") }'


#關閉文件與管道
#語句close(expression)關閉一個文件或管道，文件或管道由expression指定。
#expression的字符串值必須與最初用於創建文件或管道的字符串值相同。
#在同一個程序中，如果你寫了一個文件，而待會兒想要讀取它，那麼就需要調用close。
#某一時刻，同時處於打開狀態的文件或管道數量最大值由實現定義。

close("sort -nk 2")

